[
  {
    "objectID": "environments.html",
    "href": "environments.html",
    "title": "3  Environments",
    "section": "",
    "text": "3.1 Context",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Environments</span>"
    ]
  },
  {
    "objectID": "environments.html#context",
    "href": "environments.html#context",
    "title": "3  Environments",
    "section": "",
    "text": "3.1.1 How R package installation works\n\n3.1.1.1 Building from binaries vs. building from source\n\n\n\n3.1.2 How Python package installation works",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Environments</span>"
    ]
  },
  {
    "objectID": "environments.html#with-conda",
    "href": "environments.html#with-conda",
    "title": "3  Environments",
    "section": "3.2 With conda",
    "text": "3.2 With conda\n\n3.2.1 Setting up an environment from scratch\nconda is …\nTo create a project environment which manages both R (r-base) and Python (python):\nconda create -n env_name r-base python=3.12\nThis sets up a new environment called env_name with both R and Python install.\nNotice you can specify which version of R and/or Python to install.\nYou can then install Packages packages with:\nconda install numpy\nAnd R packages with the same command. Note that in this case, package names are pre-pended with r-:\nconda install r-dplyr\nAll packages installed and used should now be recorded in the environment, with their appropriate version number.\nTo access and share your environment, run:\nconda env export &gt; environment.yml\nThis will create an environment.yml file in your project directory. This will allow for this environment to be set up on other systems.\n\n\n3.2.2 Installing from an environment.yml\nFor others (or for yourself on a different system) to set up an identical environment, run:\nconda -f create env_name environment.yml\nIf you can’t (or don’t want to) use conda, it is possible to manage the Python and R environments in the same project, but treat their management as seperate processes.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Environments</span>"
    ]
  },
  {
    "objectID": "environments.html#without-conda",
    "href": "environments.html#without-conda",
    "title": "3  Environments",
    "section": "3.3 Without conda",
    "text": "3.3 Without conda\n\n3.3.1 Python without conda\nIn Python, this is fairly straightforward, and you can use this method regardless of the level of permissions you have on your machine. Here, you would use venv, and requirements.txt.\n\n3.3.1.1 Setting up a venv and requirements.txt\n# To create your venv\npython -m venv env_name\nThis creates you virtual environment. To use it, and install your package you need to “activate” it.\n# To activate your venv\nsource env_name/bin/activate\nNow you have activated your environment, you can install a packages using pip.\npip install pathlib\nTo keep track of the packages your project depends on, record them in a file called requirements.txt. It is a very simple file that looks like this:\nconfigparser==7.1.0\npathlib==1.0.1\nxarray==2024.6.0\nAll it records is packagename==1.0.0, very simple!\nIf you are not sure what packages you have imported.\npip freeze\nThis should print them in the terminal.\n\n\n3.3.1.2 Installation in a new venv from a requirements.txt\nTo set up a new environment and install the required packages from a specified requirements.txt:\n# To create your venv\npython -m venv env_name\nsource env_name/bin/activate\n\npip install -r requirements.txt\n\n\n\n3.3.2 R without conda\nTo manage R dependencies, you have a couple of options, depending on the level of permissions you have on the system you are working on.\n\n3.3.2.1 With sudo permissions\nIf you have sudo permissions, when can use the pak package. The great things about pak is that, unlike install.packages() and renv::install() (more on renv later), it will automatically fetch the pre-built binaries for your operating system, distribution and version. More detail on pak, and how it operates in R in Production.\nIt will also automatically install any system-level dependencies that your R package may require. This is especially useful on linux systems, where system dependency installation can vastly differ between distributions.\nIf we have sudo permissions, and are using pak, your approach could be as simple as providing an install.R file which installs the right packages for you.\nFirst install pak:\nRscript -e install.packages('pak')\nNow it can be called in your set up script. You would normally only run this once on deployment.\n#!/usr/bin/env Rscript\n# Usage R -f install.R\n\n# Selecting p3m.dev is an optional step for linux distros\n# It will speed up installation and prevents the risk of installation \n# failing on external C libraries\n\n# This is because CRAN only provides source packages for linux\n# and not binary\n# see: https://r-in-production.org/packages.html#installing-a-package-on-linux\n\n# For Ubuntu 24.04\noptions(repos = c(CRAN = \"https://p3m.dev/cran/__linux__/noble/latest\"))\n\n# For Rocky 9\n# options(repos = c(CRAN = \"https://p3m.dev/cran/__linux__/rhel9/latest\"))\n\npak::pak(\"readr\")\npak::pak(\"paws\")\npak::pak(\"ini\")\npak::pak(\"assertr\")\npak::pak(\"dplyr\")\n\n# A package on Github:\npak::pak(\"thomaszwagerman/butterfly\")\nCall it with:\nR -f install.R\n\n\n3.3.2.2 Without sudo permission\nWithout sudo permission on your machine, you might have trouble running installation commands such as install.packages() or pak::pak(), as R might be trying to install your packages into a shared library, where you do not have ‘write’ permission.\nIn this case, the path of least resistance would be to use renv. To manage your environment.\nIf you have not used renv before, it is highly recommended you read Getting Started with renv before reading further.\nTo start using renv:\ninstall.packages('renv')\n\nrenv::init()\nThis will install and set up renv for you. renv::init() generates a renv.lock file based on the packages you have installed and used.\nAn extract from a renv.lock is shown below. You will notice it specifies the version of R used, which repositories it has used for installation, as well as packages and their associated version and download source.\n{\n  \"R\": {\n    \"Version\": \"4.4.1\",\n    \"Repositories\": [\n      {\n        \"Name\": \"P3M\",\n        \"URL\": \"https://packagemanager.posit.co/cran/__linux__/centos7/latest\"\n      }\n    ]\n  },\n  \"Packages\": {\n    \"MASS\": {\n      \"Package\": \"MASS\",\n      \"Version\": \"7.3-59\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"grDevices\",\n        \"graphics\",\n        \"methods\",\n        \"stats\",\n        \"utils\"\n      ],\n      \"Hash\": \"0cafd6f0500e5deba33be22c46bf6055\"\n    },\n    \"R6\": {\n      \"Package\": \"R6\",\n      \"Version\": \"2.5.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"470851b6d5d0ac559e9d01bb352b4021\"\n    }\n  }\n}\nYou might have noticed, that the Repositories URL is set to a specific destination: https://packagemanager.posit.co/cran/__linux__/centos7/latest.\nThis destination is set to a specific operating system, centos7. This URL is obtained from the Posit Package Manager.\nWhen using pak, this is automatically fetched for us. Unfortunately for us, renv does not use pak. To prevent having to manually change this URL for each deployment on a different system, we need to insert this URL depending on the operating system we are working on.\nShannon Pileggi\nWith the above in mind, the install.R script would look like this:\n#!/usr/bin/env Rscript\n# Usage R -f hpc_setup.R\n#\n# This will not work with opensuse and sle,\n# naming inconsistencies across distros is hard\n\n# This is not an R project, so need to manually \"activate\" renv\nsource(\"renv/activate.R\")\n\ninstall.packages(\"pkgcache\")\n\n# Moving on to installing r and system dependencies with renv.lock\n# Have R obtain the current platform distro and release\nos &lt;- data.frame(\n  distribution = pkgcache::current_r_platform_data()$distribution,\n  release = pkgcache::current_r_platform_data()$release\n)\n\nos$release &lt;- round(as.numeric((os$release)))\n\n# Some wrangling to make matching more reliable across distros\nppm_platforms &lt;- pkgcache::ppm_platforms()\n\n# Take the word \"linux\" out of distribution names\nppm_platforms$distribution &lt;- gsub(\"linux\", \"\", ppm_platforms$distribution)\n# Makes matching rocky distro possible \nppm_platforms$release &lt;- round(as.numeric((ppm_platforms$release)))\n\n# Match with pak's ppm_platforms\nos_table &lt;- merge(\n  os,\n  ppm_platforms\n)\n\nif (os_table$os == \"linux\") {\n  p3m_url &lt;- paste0(\n    \"https://p3m.dev/cran/__linux__/\",\n  os_table$binary_url,\n\"/latest\"\n)\n} else {\n  p3m_url &lt;- \"https://p3m.dev/cran/latest\"\n}\n\nrenv::lockfile_modify(repos = c(\n  P3M = p3m_url\n)) |&gt; \nrenv::lockfile_write()\n\nrenv::restore()\nIn summary, this script should:\n\nActivate renv and install pkgcache.\nDetect which os, distribution and version R is being run on.\nConcatenate the package manager URL and the os binary URL.\nModify the renv.lock file to point the repos URL to the correct binary URL.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Environments</span>"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Python for the R user\n\nmatplotlib, instead of ggplot2\nnumpy, instead of dplyr\n\nUsing R and Python together\n\nLanguage bridges: reticulate / rpy2\nQuarto: language agnostic publishing\nWeb Applications: Shiny for R / Shiny for Python\nIn Production: Shell execution\nIn Production: Managing environments",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "rnpy",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "Preface"
    ]
  }
]