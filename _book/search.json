[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Combining R and Python for Scientific Computing",
    "section": "",
    "text": "Preface\nHello!",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 Language Agnostic Data Science\nThe trend of the past few years is that Data Science is becoming more language-agnostic.\nTools such as Quarto, Apache Arrow… enable working across languages with less friction.\nRStudio (the company) renaming itself to “Posit” was also a clear statement of intent. Tools like Shiny and Pins are being ported to Python, and the latest exciting installment is Posit’s new language agnostic data science IDE, Positron.\nWe often receive questions from R users on whether we can deliver an “Introduction to Python” course, or something similar. While yes, we can certainly do that, the question really is… why?\nAnother aspect to this we have noticed, is that a lot of “Introduction to Python” courses are almost always aimed at complete beginners of programming full stop. Most, if not all R users know full-well what a variable or a dataframe is and how to print(\"Hello World!\"). These courses are not pitched at the right level.\nReturning to the question of why R users might want to learn Python, the answer is that there could be a plethora of reasons. But sometimes, simply being able to use R in combination with Python could be enough to achieve your aims.\nIn other scenarios, you will need to learn some Python, but a quick crash course on the differences between R and Python and the particular topic you’re interested in could be enough.\nThis book aims to provide some guidance on where R and Python are different, but also show the ever-increasing range of methods to combine the two languages together. This book is split in two major sections, Python for the R user and Using R and Python together.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#python-for-the-r-user",
    "href": "intro.html#python-for-the-r-user",
    "title": "1  Introduction",
    "section": "1.2 Python for the R user",
    "text": "1.2 Python for the R user\nThis chapter attempts to minimally break down the differences between R and Python, written for the R user.\nTopics:\n\nmatplotlib, instead of ggplot2\nnumpy, instead of dplyr",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#using-r-and-python-together",
    "href": "intro.html#using-r-and-python-together",
    "title": "1  Introduction",
    "section": "1.3 Using R and Python together",
    "text": "1.3 Using R and Python together\nThis chapter outlines the range of tools available to implement R and Python together, and allow you to collaborate with Python users, without actually learning much Python.\nTopics:\n\nLanguage bridges: reticulate / rpy2\nQuarto: language agnostic publishing\nWeb Applications: Shiny for R / Shiny for Python\nIn Production: Shell execution\nIn Production: Managing environments",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "differences.html",
    "href": "differences.html",
    "title": "2  Differences between R and Python",
    "section": "",
    "text": "Differences",
    "crumbs": [
      "Python for the R User",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Differences between R and Python</span>"
    ]
  },
  {
    "objectID": "bridges.html",
    "href": "bridges.html",
    "title": "3  Language bridges: reticulate / rpy2",
    "section": "",
    "text": "3.1 Using R in Python: rpy2\nIn a Python, you can incorporate R scripts using the rpy2 package.\nBelow shows an example where we have some R scripts that contains functions we want to use in Python:\nWe can now use the functions read_in_data_r and do_something_r in our script.\nFor example, reading in some csv data, and doing something to it:\nWe could keep using R throughout, but the r_df is an R dataframe object.\nIf we wanted to continue our analysis, but using pandas, we will have to convert our R dataframe, to a pandas dataframe:\nHere, df is now a pandas dataframe that can be used natively in Python.\nSome considerations:",
    "crumbs": [
      "Using R and Python Together",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Language bridges: reticulate / rpy2</span>"
    ]
  },
  {
    "objectID": "bridges.html#using-r-in-python-rpy2",
    "href": "bridges.html#using-r-in-python-rpy2",
    "title": "3  Language bridges: reticulate / rpy2",
    "section": "",
    "text": "from rpy2 import robjects\nfrom rpy2.robjects import pandas2ri\n\n# Load R functions\n# Read R scripts from files\ndef load_r_script(filename):\n    with open(filename, \"r\") as file:\n        return file.read()\n\nscript_location = \"src/R/\"\n\nscript_filenames = [\n    \"read_in_data.R\",\n    \"do_something.R\"\n]\n\nscripts = [script_location + script for script in script_filenames]\n\nfor script in scripts:\n    robjects.r(load_r_script(script))\n\n# Assign the functions by loading them with robjects\nread_in_data_r = robjects.r[\"read_in_data\"]\ndo_something_r = robjects.r[\"do_something\"]\n\n\nr_df = read_in_data_r(\"/data/my_file.csv\")\nr_df = do_something_r(r_df)\n\n\nwith (robjects.default_converter + pandas2ri.converter).context():\n    df = robjects.conversion.get_conversion().rpy2py(r_df)\n\n\n\nThis is great method to quickly incorporate some R code into a Python script.\nYou will need to manage dependencies across both R and Python, see Chapter 7.\nPerformance - the conversion step can be computationally expensive in some cases. This is especially important to consider when using this method in a Shiny for Python application. If your app relies on snappy performance, use this method as a prototype, and subsequently consider whether the effort of porting your R scripts to a Python-based method is worth the performance improvement. If sticking with this method, try to minimise the number of conversions back and forth.",
    "crumbs": [
      "Using R and Python Together",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Language bridges: reticulate / rpy2</span>"
    ]
  },
  {
    "objectID": "bridges.html#using-python-in-r-reticulate",
    "href": "bridges.html#using-python-in-r-reticulate",
    "title": "3  Language bridges: reticulate / rpy2",
    "section": "3.2 Using Python in R: reticulate",
    "text": "3.2 Using Python in R: reticulate",
    "crumbs": [
      "Using R and Python Together",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Language bridges: reticulate / rpy2</span>"
    ]
  },
  {
    "objectID": "shell_execution.html",
    "href": "shell_execution.html",
    "title": "6  Using R and Python in the shell",
    "section": "",
    "text": "6.1 R\nRunning R in the shell bring slightly different concerns from running R interactively - which is likely what most R users are used to.\nThere are a few extra quirks and considerations to running R in the shell, some of which are listed below.",
    "crumbs": [
      "Using R and Python Together",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Using R and Python in the shell</span>"
    ]
  },
  {
    "objectID": "shell_execution.html#r",
    "href": "shell_execution.html#r",
    "title": "6  Using R and Python in the shell",
    "section": "",
    "text": "6.1.1 Executing scripts\nIf you are intending to run an R script in the shell, the following line of text should be at the top of your script:\n#!/usr/bin/env Rscript\n\n\n6.1.2 Rscript vs R -f\nWhat is the difference?\n\n\n6.1.3 Logging methods\nBase R’s sink() function\nThe logging and logger packages.\n\n\n6.1.4 A note on developing R packages\nWhen writing functions as part of an R package, it could be useful to keep in mind that some users might not be using your package interactively, but through the shell.\nThere is no difference in functionality here, but feedback your package provides, say through print() (discouraged), message()/warning()/stop(), or cli::cat_*() functions, behave slightly differently.",
    "crumbs": [
      "Using R and Python Together",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Using R and Python in the shell</span>"
    ]
  },
  {
    "objectID": "environments.html",
    "href": "environments.html",
    "title": "7  Managing Environments",
    "section": "",
    "text": "7.1 Context\nThis is a big one for the R user. When you are unfamiliar with how Python virtual environments work, it is probably one of the most frustrating concepts to pick up from scratch.\nBut fear not - to fully get to grips with how Python virtual environments work and package installation works, it is good to remind ourselves how this works in R.",
    "crumbs": [
      "Using R and Python Together",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Managing Environments</span>"
    ]
  },
  {
    "objectID": "environments.html#context",
    "href": "environments.html#context",
    "title": "7  Managing Environments",
    "section": "",
    "text": "7.1.1 How R package installation works\nWell, remind ourselves…. Python installation in R is likely something you have not really thought about, beyond writing install.packages().\nThis is one of the huge benefits that makes R easy to pick up for “non-programmers”, a lot of this stuff is handled for you.\n\n7.1.1.1 Building from binaries vs. building from source\n\n\n\n7.1.2 How Python package installation works\npip, conda, miniconda, mambo PyPi… where do I start?",
    "crumbs": [
      "Using R and Python Together",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Managing Environments</span>"
    ]
  },
  {
    "objectID": "environments.html#with-conda",
    "href": "environments.html#with-conda",
    "title": "7  Managing Environments",
    "section": "7.2 With conda",
    "text": "7.2 With conda\n\n7.2.1 Setting up an environment from scratch\nconda is …\nTo create a project environment which manages both R (r-base) and Python (python):\nconda create -n env_name r-base python=3.12\nThis sets up a new environment called env_name with both R and Python install.\nNotice you can specify which version of R and/or Python to install.\n\n7.2.1.1 Python packages\nYou can then install Packages packages with:\nconda install numpy\n\n\n7.2.1.2 Python packages on Github\nFor Python packages on Github:\nconda install git pip\n\n# Now use pip install with git+&lt;repo-url&gt;\npip install git+https://github.com/davidwilby/amundsen-sea-low-index\n\n# If you need a specific optional dependency:\npip install asli[s3]@git+https://github.com/davidwilby/amundsen-sea-low-index\n\n\n7.2.1.3 R packages\nR packages are installed with the same conda install command. Note that in this case, package names are pre-pended with r-:\nconda install r-dplyr\n\n\n7.2.1.4 R packages on Github, or not on CRAN\nFor R packages on Github:\nTaken from this issue, but does not work for me\nconda install conda build\n\nconda skeleton cran &lt;github-url&gt;\n\n# Replace with your version of R\nconda build --R=4.2.2 r-&lt;lowercase-packagename&gt;\nThis creates a “conda skeleton” of the R package hosted on Github.\nnote, explain what a conda skeleton is?\nAlternative approach, specify R version in conda but use renv::restore() for non-CRAN packages\nAll packages installed and used should now be recorded in the environment, with their appropriate version number.\n\n\n\n7.2.2 Exporting conda environment: environment.yml\nTo access and share your environment, run:\nconda env export &gt; environment.yml\nThis will create an environment.yml file in your project directory. This will allow for this environment to be set up on other systems.\n\n\n7.2.3 Installing from an environment.yml\nFor others (or for yourself on a different system) to set up an identical environment, run:\nconda -f create env_name environment.yml\nIf you can’t (or don’t want to) use conda, it is possible to manage the Python and R environments in the same project, but treat their management as seperate processes.",
    "crumbs": [
      "Using R and Python Together",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Managing Environments</span>"
    ]
  },
  {
    "objectID": "environments.html#without-conda",
    "href": "environments.html#without-conda",
    "title": "7  Managing Environments",
    "section": "7.3 Without conda",
    "text": "7.3 Without conda\n\n7.3.1 Python without conda\nIn Python, this is fairly straightforward, and you can use this method regardless of the level of permissions you have on your machine. Here, you would use venv, and requirements.txt.\n\n7.3.1.1 Setting up a venv and requirements.txt\n# To create your venv\npython -m venv env_name\nThis creates you virtual environment. To use it, and install your package you need to “activate” it.\n# To activate your venv\nsource env_name/bin/activate\nNow you have activated your environment, you can install a packages using pip.\npip install pathlib\nTo keep track of the packages your project depends on, record them in a file called requirements.txt. It is a very simple file that looks like this:\nconfigparser==7.1.0\npathlib==1.0.1\nxarray==2024.6.0\nAll it records is packagename==1.0.0, very simple!\nIf you are not sure what packages you have imported.\npip freeze\nThis should print them in the terminal.\n\n\n7.3.1.2 Installation in a new venv from a requirements.txt\nTo set up a new environment and install the required packages from a specified requirements.txt:\n# To create your venv\npython -m venv env_name\nsource env_name/bin/activate\n\npip install -r requirements.txt\n\n\n\n7.3.2 R without conda\nTo manage R dependencies, you have a couple of options, depending on the level of permissions you have on the system you are working on.\n\n7.3.2.1 With sudo permissions\nIf you have sudo permissions, we can use the pak package. The great things about pak is that, unlike install.packages() and renv::install() (more on renv later), it will automatically fetch the pre-built binaries for your operating system, distribution and version. More detail on pak, and how it operates in R in Production.\nIt will also automatically install any system-level dependencies that your R package may require. This is especially useful on linux systems, where system dependency installation can vastly differ between distributions.\nIf we have sudo permissions, and are using pak, your approach could be as simple as providing an install.R file which installs the right packages for you.\nFirst install pak:\nRscript -e install.packages('pak')\nNow it can be called in your set up script. You would normally only run this once on deployment.\n#!/usr/bin/env Rscript\n# Usage R -f install.R\n\n# Selecting p3m.dev is an optional step for linux distros\n# It will speed up installation and prevents the risk of installation \n# failing on external C libraries\n\n# This is because CRAN only provides source packages for linux\n# and not binary\n# see: https://r-in-production.org/packages.html#installing-a-package-on-linux\n\n# For Ubuntu 24.04\noptions(repos = c(CRAN = \"https://p3m.dev/cran/__linux__/noble/latest\"))\n\n# For Rocky 9\n# options(repos = c(CRAN = \"https://p3m.dev/cran/__linux__/rhel9/latest\"))\n\npak::pak(\"readr\")\npak::pak(\"paws\")\npak::pak(\"ini\")\npak::pak(\"assertr\")\npak::pak(\"dplyr\")\n\n# A package on Github:\npak::pak(\"thomaszwagerman/butterfly\")\nCall it with:\nR -f install.R\n\n\n7.3.2.2 Without sudo permission\nWithout sudo permission on your machine, you might have trouble running installation commands such as install.packages() or pak::pak(), as R might be trying to install your packages into a shared library, where you do not have ‘write’ permission.\nIn this case, the path of least resistance would be to use renv. To manage your environment.\nIf you have not used renv before, it is highly recommended you read Getting Started with renv before reading further.\nTo start using renv:\ninstall.packages('renv')\n\nrenv::init()\nThis will install and set up renv for you. renv::init() generates a renv.lock file based on the packages you have installed and used.\nAn extract from a renv.lock is shown below. You will notice it specifies the version of R used, which repositories it has used for installation, as well as packages and their associated version and download source.\n{\n  \"R\": {\n    \"Version\": \"4.4.1\",\n    \"Repositories\": [\n      {\n        \"Name\": \"P3M\",\n        \"URL\": \"https://packagemanager.posit.co/cran/__linux__/centos7/latest\"\n      }\n    ]\n  },\n  \"Packages\": {\n    \"MASS\": {\n      \"Package\": \"MASS\",\n      \"Version\": \"7.3-59\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"grDevices\",\n        \"graphics\",\n        \"methods\",\n        \"stats\",\n        \"utils\"\n      ],\n      \"Hash\": \"0cafd6f0500e5deba33be22c46bf6055\"\n    },\n    \"R6\": {\n      \"Package\": \"R6\",\n      \"Version\": \"2.5.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"470851b6d5d0ac559e9d01bb352b4021\"\n    }\n  }\n}\n\n\nThis destination is set to a specific operating system, centos7. This URL is obtained from the Posit Package Manager.\nWhen using pak, this is automatically fetched for us. Unfortunately for us, renv does not use pak. To prevent having to manually change this URL for each deployment on a different system, we need to insert this URL depending on the operating system we are working on.\nShannon Pileggi\nWith the above in mind, the install.R script would look like this:\n#!/usr/bin/env Rscript\n# Usage R -f hpc_setup.R\n#\n# This will not work with opensuse and sle,\n# naming inconsistencies across distros is hard\n\n# This is not an R project, so need to manually \"activate\" renv\nsource(\"renv/activate.R\")\n\ninstall.packages(\"pkgcache\")\n\n# Moving on to installing r and system dependencies with renv.lock\n# Have R obtain the current platform distro and release\nos &lt;- data.frame(\n  distribution = pkgcache::current_r_platform_data()$distribution,\n  release = pkgcache::current_r_platform_data()$release\n)\n\nos$release &lt;- round(as.numeric((os$release)))\n\n# Some wrangling to make matching more reliable across distros\nppm_platforms &lt;- pkgcache::ppm_platforms()\n\n# Take the word \"linux\" out of distribution names\nppm_platforms$distribution &lt;- gsub(\"linux\", \"\", ppm_platforms$distribution)\n# Makes matching rocky distro possible \nppm_platforms$release &lt;- round(as.numeric((ppm_platforms$release)))\n\n# Match with pak's ppm_platforms\nos_table &lt;- merge(\n  os,\n  ppm_platforms\n)\n\nif (os_table$os == \"linux\") {\n  p3m_url &lt;- paste0(\n    \"https://p3m.dev/cran/__linux__/\",\n  os_table$binary_url,\n\"/latest\"\n)\n} else {\n  p3m_url &lt;- \"https://p3m.dev/cran/latest\"\n}\n\nrenv::lockfile_modify(repos = c(\n  P3M = p3m_url\n)) |&gt; \nrenv::lockfile_write()\n\nrenv::restore()\nIn summary, this script should:\n\nActivate renv and install pkgcache.\nDetect which os, distribution and version R is being run on.\nConcatenate the package manager URL and the os binary URL.\nModify the renv.lock file to point the repos URL to the correct binary URL.",
    "crumbs": [
      "Using R and Python Together",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Managing Environments</span>"
    ]
  }
]